Description: >
  This is a template that creates EC2 instances, VPC, Subnet, RoutingTable and

Parameters:
  SshKeyPair:
    Type: String
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDAlVjPoTZEQU/2jhXi94qIF1XvGKie46HFIexZlrXdgdYnRuRMeQKiN1LJ0S/CBMhzX/9CH8PnSasQ35AFBdhnECrKHc5jA6p7Xw0ivBKCBw5faVIoN+sYHQxbxpB305FH7VLVp6LEx8JdlnO5aVXQf7sqK9ZppbcZyH7TtiKYw8SYDR3PWugJ5poFnEP8Aub0Zzgz6+9IVnSB+575geZAwiozEEka/4QXCLBp6n5OGDFE78QHOWE3w1kxfdPmntKOKOttdr1L2gPAliWKsJ2afamGqga8afbi2yMnop7ygtrER19wc1xlNTVPZ1I70Jf3ECYTCAbxlSdGrDuP274l1iirMXo22B/JjQTQRVvrE8m0j/DQQ83ZGW3pRvTA96MTpDx2wlHS0H28nMgVVcKSHNZMkV++Mdt53G3E40FwvoQskKqv5MNOiIZFH2RZ9XsDRLi8oVR5KIspOTPgM4aJgeWrmNhOjQV+yJf1/W8g4xfYkuymYVFB7ZqtJjIhblE= nim@Nima.local
  SshSourceIpV4:
    Type: String
    Default: 158.176.95.134/32

Mappings:
    RegionToAmazonAMI:
        us-east-1:
            UB20: ami-0070c5311b7677678
        ap-southeast-2:
            UB20: ami-048a2d001938101dd

Resources:
  MySshKey:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: NimaMacbookPro
      PublicKeyMaterial: !Ref SshKeyPair
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RouteV4:
    DependsOn:
      - InternetGateway
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  PublicBRouteV4:
    DependsOn:
      - InternetGateway
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicBRouteTable
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: "true"
  PublicBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: "true"
  PrivSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: "False"
  PrivBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: "False"
  RouteTableAssosiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  PublicBRouteTableAssosiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicBSubnet
      RouteTableId: !Ref PublicBRouteTable
  PrivRouteTableAssosiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivSubnet
      RouteTableId: !Ref PrivBRouteTable
  PrivBRouteTableAssosiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivBSubnet
      RouteTableId: !Ref PrivRouteTable
  EC2SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: 'Permitting SSH From Specific IP'
        VpcId: !Ref VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: !Ref SshSourceIpV4
            - IpProtocol: -1
              CidrIp: 10.0.0.0/24
            - IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
              SourceSecurityGroupId:
                Ref: ELBSecurityGroup
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SshSourceIpV4
  
  JenkinsK8sControlPlane: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId:
        Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - UB20
      InstanceType: t3.medium
      KeyName: !Ref MySshKey
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref Subnet
      Tags:
        - Key: Name
          Value: Jenkins-k8sControl
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /home/ubuntu/
          sudo apt update && sudo apt install -y curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /bin
          echo "complete -C '/bin/aws_completer' aws" >> /home/ubuntu/.bashrc
  k8sWorker1:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId:
        Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - UB20
      InstanceType: t3.medium
      KeyName: !Ref MySshKey
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref Subnet
      Tags:
        - Key: Name
          Value: k8sWorker1
      #UserData:
        #Fn::Base64: !Sub |
          #!/bin/bash -xe
          #cd /home/ubuntu/
  k8sWorker2:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId:
        Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - UB20
      InstanceType: t3.medium
      KeyName: !Ref MySshKey
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref Subnet
      Tags:
        - Key: Name
          Value: k8sWorker2
      #UserData:
        #Fn::Base64: !Sub |
          #!/bin/bash -xe
          #cd /home/ubuntu/

  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: JenkinsTargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Targets:
        - Id:
            Ref: JenkinsK8sControlPlane
          Port: 8080
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: 'VPC'
      Tags:
        - Key: Name
          Value: JenkinsTargetGroup
        - Key: Port
          Value: 80
  JenkinsALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: JenkinsTargetGroup
        LoadBalancerArn:
            Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
  ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing # or internal
        Subnets:
        - Ref: Subnet
        - Ref: PublicBSubnet
        SecurityGroups:
        - Ref: ELBSecurityGroup
Outputs:
  JenkinsPublicIP:
    Value: !GetAtt JenkinsK8sControlPlane.PublicIp
    Description: "Jenkins's Public ip"
  JenkinsPrivateIP:
    Value: !GetAtt JenkinsK8sControlPlane.PrivateIp
    Description: "Jenkins's Private ip"
  Worker1PublicIP:
    Value: !GetAtt k8sWorker1.PublicIp
    Description: "Worker1's Public ip"
  Worker1PrivateIP:
    Value: !GetAtt k8sWorker1.PrivateIp
    Description: "Worker1's Private ip"
  Worker2PublicIP:
    Value: !GetAtt k8sWorker2.PublicIp
    Description: "Worker2's Public ip"
  Worker2PrivateIP:
    Value: !GetAtt k8sWorker2.PrivateIp
    Description: "Worker2's Private ip"
  ALBHostName:
        Description: 'Application Load Balancer Hostname'
        Value:
          !GetAtt ApplicationLoadBalancer.DNSName
  

