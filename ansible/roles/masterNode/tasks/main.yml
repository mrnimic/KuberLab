- name: Set Master hostname.
  become: yes
  become_user: root
  hostname:
    name: control-plane

- name: Add Google official GPG key
  become: yes
  become_user: root
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes Repository
  become: yes
  become_user: root
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main 
    state: present
    filename: kubernetes
    mode: 0600
    
- name: Install prerequisite packages.
  become: yes
  become_user: root
  ansible.builtin.apt:
    name:
      - python3
      - unzip
      - kubectl
    state: present
    update_cache: yes

######## AWSCLI

- name: Download the awscli bundle.
  get_url: url=https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip dest=/tmp/awscliv2.zip
  register: aws_cli_download_bundle

- name: Unarchive the installer.
  unarchive: src=/tmp/awscliv2.zip dest=/tmp copy=no creates=/tmp/awscli
  when: aws_cli_download_bundle.changed
  register: aws_cli_unarchive_installer

- name: Install awscli package.
  become: yes
  become_user: root
  shell: /tmp/aws/install -i /usr/local/aws -b /usr/bin/
  when: aws_cli_unarchive_installer.changed

- name: Create .aws Directory
  file:
    path: /home/ubuntu/.aws
    state: directory

- name: Configure AWS.
  shell: echo "{{ hostvars['AWS_TOKEN_HOLDER']['token'] }}" > /home/ubuntu/.aws/credentials


######## EKSCTL

- name: Download eksctl tarball
  get_url: url=https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz dest=/tmp
  register: eksctl_download

- name: Unarchive eksctl installer
  unarchive: src=/tmp/eksctl_Linux_amd64.tar.gz dest=/tmp copy=no
  register: eksctl_unarchive
  when: eksctl_download.changed

- name: Move eksctl binary to bin dir
  shell: mv /tmp/eksctl /usr/local/bin
  when: eksctl_unarchive.changed
  become: yes
  become_user: root

- name: eksctl completion
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    line: . <(eksctl completion bash)

- name: Create K8S Cluster
  shell : eksctl create cluster --version 1.24 --region us-east-1 --node-type t3.medium --nodes 3 --nodes-min 1 --nodes-max 4 --name Kuberlab
  when: eksctl_download.changed


######## HELM

- name: Download Helm
  get_url: url=https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 dest=/home/ubuntu/get_helm.sh
  register: helm_download

- name: Make the script executable
  when: helm_download.changed
  file:
    path: /home/ubuntu/get_helm.sh
    mode: '0700'

- name: Install Helm
  shell: /home/ubuntu/get_helm.sh
  when: helm_download.changed



######## Deploy istio/base and istio/istiod using HELM

- name: Add istio repo
  kubernetes.core.helm_repository:
    name: istio
    repo_url: "https://istio-release.storage.googleapis.com/charts"

- name: Deploy istio/base
  kubernetes.core.helm:
    name: istio-base
    chart_ref: istio/base
    release_namespace: istio-system
    create_namespace: true
  register: istiobase_deploy

- name: Deploy istiod
  kubernetes.core.helm:
    name: istiod
    chart_ref: istio/istiod
    release_namespace: istio-system
    wait: true


######## Deploy Seldon Core

- name: Create seldon-system namespace
  shell: kubectl create namespace seldon-system
  when: istiobase_deploy.changed

- name: Deploy seldon-core
  shell: helm install seldon-core seldon-core-operator --repo https://storage.googleapis.com/seldon-charts --set usageMetrics.enabled=true --namespace seldon-system --set istio.enabled=true
  when: istiobase_deploy.changed

######### Deployment Files

- name: Copy Project into Bastion
  ansible.builtin.copy:
    src: /home/ubuntu/Nima/Projects/onsite-hossein.zip
    dest: /home/ubuntu/onsite-hossein.zip
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  register: copy_project

- name: Unarchive Project
  unarchive: src=/home/ubuntu/onsite-hossein.zip dest=/home/ubuntu/ copy=no
  when: copy_project.changed