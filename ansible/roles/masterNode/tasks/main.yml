- name: Set Master hostname.
  become: yes
  become_user: root
  hostname:
    name: kubectl-node

- name: Add Google official GPG key
  become: yes
  become_user: root
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes Repository
  become: yes
  become_user: root
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main 
    state: present
    filename: kubernetes
    mode: 0600
    
- name: Install prerequisite packages.
  become: yes
  become_user: root
  ansible.builtin.apt:
    name:
      - python3
      - python3-pip
      - unzip
      - kubectl
      - docker.io
    state: present
    update_cache: yes

- name: Install python packages
  ansible.builtin.pip:
    name: kubernetes

- name: Add ubuntu user to docker group
  become: yes
  become_user: root
  ansible.builtin.user:
    name: ubuntu
    groups: docker
    append: yes
  #notify: restart_shell


######## AWSCLI
- name: Download the awscli bundle.
  get_url: url=https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip dest=/tmp/awscliv2.zip
  register: aws_cli_download_bundle

- name: Unarchive the installer.
  unarchive: src=/tmp/awscliv2.zip dest=/tmp copy=no creates=/tmp/awscli
  when: aws_cli_download_bundle.changed
  register: aws_cli_unarchive_installer

- name: Install awscli package.
  become: yes
  become_user: root
  shell: /tmp/aws/install -i /usr/local/aws -b /usr/bin/
  when: aws_cli_unarchive_installer.changed

- name: Create .aws Directory
  file:
    path: /home/ubuntu/.aws
    state: directory

- name: Configure AWS.
  shell: echo "{{ hostvars['AWS_TOKEN_HOLDER']['token'] }}" > /home/ubuntu/.aws/credentials

- name: aws-cli autocomplete
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    line: complete -C '/usr/local/bin/aws_completer' aws


######## Update kubeconfig
- name: Update kubeconfig
  shell: aws eks update-kubeconfig --region us-east-1 --name {{ cluster_name }}

- name: add alias k for kubectl
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    line: alias k='kubectl'


######### Impersonation
- name: copy my private ssh key
  ansible.builtin.copy:
    src: /Users/nima/.ssh/id_rsa
    dest: /home/ubuntu/.ssh/id_rsa
    owner: ubuntu
    group: ubuntu
    mode: '0600'

- name: copy my public ssh key
  ansible.builtin.copy:
    src: /Users/nima/.ssh/id_rsa.pub
    dest: /home/ubuntu/.ssh/id_rsa.pub
    owner: ubuntu
    group: ubuntu
    mode: '0644'


######### Clone kubernetes manifests
- name: Clone Manifests
  ansible.builtin.git:
    repo: 'git@github.com:mrnimic/bsb-k8s.git'
    dest: /home/ubuntu/repositories/bsb-k8s
    version: main
    accept_hostkey: true


######### Create Kubernetes Resources
- name: Create Namespace
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/repositories/bsb-k8s/ns.yaml

- name: Create Dockerhub Secret
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/repositories/bsb-k8s/app/dockerhub-secret.yaml

- name: Create Environment Variables ConfigMap
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/repositories/bsb-k8s/app/app-env.yaml

- name: Create Deployment
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/repositories/bsb-k8s/app/app-deployment.yaml

- name: Create Service
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/repositories/bsb-k8s/app/app-svc.yaml

- name: Install Ingress Controller manifest to the cluster.
  shell: kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master"

- name: Create Ingress
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/repositories/bsb-k8s/app/app-ingress.yaml

######### Build n Push
# - name: Build Frontend
#   community.docker.docker_image:
#     build:
#       path: /home/ubuntu/repositories/bsb-react
#       args:
#         API_PROXY: https://api-bsb.mrnimic.com
#         SBS_ORIGIN_URL: https://bsb.mrnimic.com
#     name: '{{ frontend_ecr_url }}'
#     tag: v1.0.4
#     push: true
#     source: build



# - name: Create a example.net CNAME record to example.com
#   community.general.cloudflare_dns:
#     zone: example.net
#     type: CNAME
#     value: example.com
#     account_email: test@example.com
#     account_api_key: dummyapitoken
#     state: present